# Generated by Django 3.0.7 on 2020-06-25 06:21

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import eventapp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('authapp', '0004_auto_20200625_1051'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='category')),
            ],
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='type')),
            ],
        ),
        migrations.CreateModel(
            name='Register',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_id', models.CharField(blank=True, max_length=100, verbose_name='registration id')),
                ('condition', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'registered'), (2, 'canceled')], verbose_name='condition')),
                ('register_time', models.DateTimeField(auto_now_add=True, verbose_name='register time')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, verbose_name='title')),
                ('description', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(256)], verbose_name='description')),
                ('capcity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='capacity')),
                ('price', models.PositiveIntegerField(verbose_name='price')),
                ('registered_users', models.ManyToManyField(related_name='tickets', through='eventapp.Register', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='register',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='register', to='eventapp.Ticket'),
        ),
        migrations.AddField(
            model_name='register',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='register', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, verbose_name='title')),
                ('image', models.ImageField(blank=True, null=True, upload_to=eventapp.models.event_image_upload_location, verbose_name='image')),
                ('description', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(256)], verbose_name='description')),
                ('start_time', models.DateTimeField(verbose_name='start time')),
                ('end_time', models.DateTimeField(verbose_name='end time')),
                ('address', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(256)], verbose_name='address')),
                ('tags', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(256)], verbose_name='tags')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='authapp.City')),
                ('event_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='eventapp.EventCategory')),
                ('event_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='eventapp.EventType')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_events', to=settings.AUTH_USER_MODEL)),
                ('tickets', models.ManyToManyField(related_name='events', to='eventapp.Ticket')),
            ],
        ),
    ]
